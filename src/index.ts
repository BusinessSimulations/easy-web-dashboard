import { app, ipcMain, WebContentsView, BrowserWindow } from 'electron';
import * as fs from 'fs';
import * as path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

type WindowMode = 'kiosk' | 'fullscreen' | 'maximized' | 'window';

interface SiteConfig {
    url: string;
    name: string;
}

interface DashboardConfig {
    window_mode: WindowMode;
    window_size: WindowSize;
    resizable: boolean;
    controls_enabled: boolean;
    rotation_seconds: number;
    rotation_enabled: boolean;
    rotation_on_by_default: boolean;
    primary_color: string;
    primary_contrast_color: string;
    text_color: string;
    background_color: string;
}

interface WindowSize {
    width: number;
    height: number;
}

interface AppConfig {
    sites: SiteConfig[];
    dashboard: DashboardConfig;
}

const defaultConfig: AppConfig = {
    sites: [
        { url: 'https://www.electronjs.org/', name: 'Electron' },
        { url: 'https://businesssimulations.com/', name: 'Business Simulations' }
    ],
    dashboard: {
        window_mode: 'kiosk',
        window_size: {
            width: 600,
            height: 600
        },
        resizable: false,
        controls_enabled: true,
        rotation_seconds: 30,
        rotation_enabled: true,
        rotation_on_by_default: true,
        primary_color: '#1976d2',
        primary_contrast_color: '#ffffff',
        text_color: '#000000',
        background_color: '#f5f5f5'
    }
};

// Load configuration from file or use defaults
function loadConfig(): AppConfig {
    const configPath = path.join(process.cwd(), 'config.json');

    try {
        if (fs.existsSync(configPath)) {
            const configData = fs.readFileSync(configPath, 'utf8');
            const loadedConfig = JSON.parse(configData);
            // Merge with defaults to ensure all properties exist
            return {
                sites: loadedConfig.sites || defaultConfig.sites,
                dashboard: {
                    ...defaultConfig.dashboard,
                    ...loadedConfig.dashboard
                }
            };
        }
    } catch (error) {
        console.error('Failed to read config file:', error);
    }

    return defaultConfig;
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    const config = loadConfig();

    const win = new BrowserWindow({
        width: config.dashboard.window_size.width,
        height: config.dashboard.window_size.height,
        resizable: true,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true
        },
    });

    const bounds = win.getBounds();
    const CONTROLS_HEIGHT = 50;

    if (config.dashboard.controls_enabled) {
        const controlsView = new WebContentsView({
            webPreferences: {
                preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
                contextIsolation: true,
                nodeIntegration: false
            },
        });
        win.contentView.addChildView(controlsView);
        controlsView.webContents.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
        controlsView.setBounds({
            x: 0,
            y: 0,
            width: bounds.width,
            height: CONTROLS_HEIGHT
        });

        // Make controls stick to top when window is resized
        win.on('resize', () => {
            const newBounds = win.getBounds();
            controlsView.setBounds({
                x: 0,
                y: 0,
                width: newBounds.width,
                height: CONTROLS_HEIGHT
            });
        });
    }

    const contentView = new WebContentsView({
        webPreferences: {
            partition: 'persist:easy-web-dashboard',
            contextIsolation: true,
            nodeIntegration: false
        }
    });
    win.contentView.addChildView(contentView);

    const contentViewY = config.dashboard.controls_enabled ? CONTROLS_HEIGHT : 0;
    const contentViewHeight = config.dashboard.controls_enabled
        ? bounds.height - CONTROLS_HEIGHT
        : bounds.height;

    contentView.setBounds({
        x: 0,
        y: contentViewY,
        width: bounds.width,
        height: contentViewHeight
    });

    if (config.sites.length > 0) {
        contentView.webContents.loadURL(config.sites[0].url);
    }

    win.on('resize', () => {
        const newBounds = win.getBounds();
        contentView.setBounds({
            x: 0,
            y: contentViewY,
            width: newBounds.width,
            height: config.dashboard.controls_enabled ? newBounds.height - CONTROLS_HEIGHT : newBounds.height
        });
    });

    ipcMain.handle('get-config', () => config);

    ipcMain.on('load-url', (event, url) => {
        contentView.webContents.loadURL(url);
    });

    // This is an attempt to work around Wayland weirdness on startup, it seems to break on Raspberry PI when
    // you immediately go full screen
    setTimeout(() => {
        switch (config.dashboard.window_mode) {
            case 'kiosk': {
                win.setFullScreen(true);
                win.setKiosk(true);
                win.on('enter-full-screen', () => {
                    win.setResizable(config.dashboard.resizable);
                });
                break;
            }
            case 'fullscreen': {
                win.setFullScreen(true);
                win.on('enter-full-screen', () => {
                    win.setResizable(config.dashboard.resizable);
                });
                break;
            }
            case 'maximized': {
                win.maximize();
                win.setResizable(config.dashboard.resizable);
                break;
            }
            default: {
                win.setResizable(config.dashboard.resizable);
                break;
            }
        }
    }, 5000);
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
    app.quit();
});
